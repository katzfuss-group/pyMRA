using Distances

function distfun(locs1,locs2)
  pairwise(Euclidean(),locs1',locs2')
end

function kanter(t) # tapering function of Kanter (1997)
# valid in R^3, minimizes the curvature at the origin, only has 2 derivatives at the
#    origin (not useful for matern with nu>2), for more details, see gneiting (2002), eq. 22
  twopit=2*pi*t + 1.0e-300;  # add tiny number to ensure kanter(0)=1
  R=(1-t).*sin(twopit)./twopit+(1/pi)*(1-cos(twopit))./twopit;
  R[t.>1]=0; R[t.==0]=1;
  return R
end

u=5
locs=[1:u]

distmat=distfun(locs,locs)
corrmat=kanter(distmat/2)

B=eye(u)
B[1,2]=1
B[2,1]=1
B[2,3]=1
B[3,2]=1
B[3,4]=1
B[4,3]=1
B[4,5]=1
B[5,4]=1

B[1,5]=1
B[2,4]=1
B[5,1]=1
B[4,2]=1

testM=corrmat+B*0.0001

#testM=corrmat
nnodes = u;
#nnz = 17;
#testM[5,1] = 0
#testM[1,5] = 0

testM_sparse = sparse(testM);


colptr = testM_sparse.colptr;
rowind = testM_sparse.rowval;
nzvals = testM_sparse.nzval;
nnz = length(nzvals);

nnodes = convert(Int32,nnodes);
nnz = convert(Int32,nnz);
colptr = convert(Array{Int32,1},colptr);
rowind = convert(Array{Int32,1},rowind);

Lnnz = [0]
Lnnz = convert(Array{Int32,1},Lnnz);
permout=zeros(nnodes);
permout = convert(Array{Int32,1},permout);
V = ccall((:selinv2julia,
        "/home/grad/wgong/Downloads/newSelInv/SelInv/EXAMPLES/julia.so"), Ptr{Cdouble}, (Cint,Cint,Ptr{Cint},Ptr{Cint},Ptr{Cdouble},Ptr{Cint},Ptr{Cint}),
       nnodes,nnz,colptr,rowind, nzvals,Lnnz,permout);

v2 = pointer_to_array(V, (3*Lnnz[1],));
nnzInv = Lnnz[1];
iInv = v2[1:nnzInv];
jInv = v2[(nnzInv+1):(2*nnzInv)];
iInv =  convert(Array{Int32,1},iInv);
jInv = convert(Array{Int32,1},jInv);

for i=1:nnzInv
    iInv[i] = permout[iInv[i]];
    jInv[i] = permout[jInv[i]];
end

testM_inv = sparse(iInv,jInv,
	  v2[(2*nnzInv+1):(3*nnzInv)])
testM_inv = testM_inv + transpose(testM_inv)
for i=1:nnodes
    testM_inv[i,i] = testM_inv[i,i]/2
end

full(testM_inv)
inv(testM)


